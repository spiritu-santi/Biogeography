###################
# GLOBAL SETTINGS #
###################      
under_prior = true # run MCMC under prior

# Set up the file naming system
fp = "/Users/spiritusanti/Documents/1.PROYECTOS/5.TREE_FERNS/TREE_FERNS_v4/R_project/rb_out/" #path
out_fp = fp + "output_full_prior/"

# Implement the full joint inference?
use_mol = false
do_fbd = false

# Use fossils (false) or only extant (true)
pruned = false

# Use a fixed tree (true) or sample from the posterior (false)
fixed = false

# Do stochastic character mapping?
use_stoch = true

#####################
# GLOBAL PARAMETERS #
#####################
n_areas = 8
max_areas = 2
use_epochs = true # whether to use multiple dispersal matrices
masked = false # this option only applies to n_areas = 3, and if true uses the coding scheme of wide-spread fossils. Keep as 'false' to do the 8-area analysis.

# MCMC settings #
n_gens = 5000
n_burn = 500
tune_freq = 10
sample_freq = 10
n_runs = 1
mni = 1
mvi = 1

################
# FILES SET UP #
################
if (!exists("job_str")) job_str = "my_run.1"
if (under_prior) job_str += ".under_prior"
if (!use_epochs) job_str += ".no_epoch"
if (!use_stoch) job_str += ".no_stoch"

in_fp = fp + "data/"
code_fp = fp + "code/"
#if(!pruned) out_fp = fp + "output/"
#if(pruned) out_fp = fp + "output_pruned/"
#if(masked) out_fp = fp + "output_masked/"
out_fn  = job_str

mol_fn = "Master_aln_v1.2.nex"

# Reading fossil ages
intervals_fn = "Master_fossil_intervals.tsv"
if(!pruned) taxa_fn = "Master_taxa.tsv"
if(pruned) taxa_fn = "Master_taxa_pruned.tsv"

# Reading posterior sample of trees
if(!pruned) tree_init_fn = "/Users/spiritusanti/Documents/1.PROYECTOS/5.TREE_FERNS/TREE_FERNS_v4/R_project/output_data/Master_Resolved_Const.trees"
if(pruned) tree_init_fn = "/Users/spiritusanti/Documents/1.PROYECTOS/5.TREE_FERNS/TREE_FERNS_v4/R_project/output_data/Master_Pruned_Const.trees"
if(fixed) mcctree = "/Users/spiritusanti/Documents/1.PROYECTOS/5.TREE_FERNS/TREE_FERNS_v4/R_project/output_data/MCC_Master_Resolved.tre"

# Reading range data
if(!pruned) range_fn = "Master_range_8.nex"
if(pruned) range_fn = "Master_range_8_pruned.nex"
if(masked) range_fn = "Master_range_8_KingsWide.nex"

# Read dispersal matrices
if(use_epochs) bg_times_fn = "Master.bg.times.txt"
if(!masked) conn_fn = "Master.area_graph.n" + n_areas
if(masked) conn_fn = "Master.area_graph_Kings.n" + n_areas

#######################
# Reading in the Data #
#######################
source(fp + "ARE/model_DATA.Rev")

###########################################
# Tree model, Clock & Substitution models #
###########################################
# Only read if running the full joint inference
if(do_fbd) source("clades.Rev")
if(do_fbd) source("model_FBDP_A.Rev")
if(do_fbd) source("model_UExp.Rev")
if(do_fbd) source("model_GTR.Rev")

##########################
# Range Evolution models #
##########################
source(fp + "ARE/model_biogeo.Rev")

########
# MCMC #
########

mymodel = model(m_bg)
mymodel.graph("Model_graph.txt") # Write the graphical model.

mn[mni++] = mnModel(filename=out_fp + out_fn + ".model.log", printgen= sample_freq)
if(!masked) mn[mni++] = mnJointConditionalAncestralState(filename=out_fp+out_fn+".bg.states.txt", printgen=sample_freq,tree= fbd_tree, ctmc=m_bg, type="NaturalNumbers", withTips=true, withStartStates=true)
#if(masked) mn[mni++] = mnJointConditionalAncestralState(filename=out_fp+out_fn+".bg.states.txt", printgen=sample_freq,tree= fbd_tree, ctmc=m_bg, type="Standard", withTips=true, withStartStates=true)

mn[mni++] = mnScreen(printgen= sample_freq)
if (!fixed) mn[mni++] = mnFile(filename=out_fp + out_fn + ".trees", printgen= sample_freq, fbd_tree)
if(use_stoch){mn[mni++] = mnStochasticCharacterMap(filename=out_fp+out_fn+".bg.stoch_map.txt", printgen=sample_freq,ctmc=m_bg)}

mymcmc = mcmc(mymodel, mn, mv, nruns = n_runs)

# Run the MCMC #
#mymcmc.burnin(generations=n_burn, tuningInterval= tune_freq)
#mymcmc.initializeFromCheckpoint("output_pruned_summ/my_run.1.state")
mymcmc.run(generations=n_gens, underPrior= under_prior, checkpointInterval = 500, checkpointFile = out_fp+out_fn+".state")
q()

#######################
# SUMMARISING OUTPUTS #
#######################

#fn = "my_run.joint" # two or more runs
fn = "my_run.1" # one single run
make_states = true
pruned = false
masked = false

# Location of tree files
if(pruned) out_fp = "output_pruned/"
if(!pruned) out_fp = "output/"
if(masked) out_fp = fp + "output_masked/"


f_burn = 0.10

print("Processing output for fn = \"" + fn + "\"")

print("--> Reading tree trace file")
if(!masked) state_tree_trace  = readTreeTrace(file= out_fp + fn, treetype="clock",burnin=f_burn)
#state_tree_trace.setBurnin(f_burn)
if(!masked) mcc_tree = mccTree(trace=state_tree_trace,file = out_fp + fn + ".mcc.tre", positiveBranchLengths=true)

#if(!pruned) map_tree = readTrees(trace=state_tree_trace, treetype="clock")[1]
if(masked) mcc_tree = readTrees("/Users/spiritusanti/Documents/1.PROYECTOS/5.TREE_FERNS/TREE_FERNS_v4/R_project/rb_out/output_summ/my_run.1.mcc.tre")[1]

if (make_states) {
    print("--> Reading ancestral range estimate trace file")
    state_trace_bg = readAncestralStateTrace(file=out_fp+fn+".bg.states.txt", separator="\t")
    # print("--> Re-reading tree trace file for ancestral states")
    #n_mcmc = state_tree_trace.size()
    #n_burn = floor(f_burn * n_mcmc)
    print("--> Building ancestral range estimates (this can take a while)")
 #tree_trace = state_tree_trace,
    bg_tree = ancestralStateTree(tree = mcc_tree,
                       ancestral_state_trace_vector = state_trace_bg,
                       include_start_states = true,
                       file = out_fp+fn+".bg.ase.tre",
                       summary_statistic="MAP",
                       reconstruction="conditional",
                       burnin= f_burn,
                       nStates=3,
                       site=1)
}
print("...done!")

# burn-in

# MCC tree
tree_trace = state_tree_trace
#mcc_tree = mccTree(trace= tree_trace,file = out_fp + fn + ".mcc.tre", positiveBranchLengths=true)

# read in tree trace -- note we only need this when the tree 
# and ancestral states are jointly estimated
#print("--> Reading tree trace file")
#state_tree_trace  = readTreeTrace(file= out_fp + fn + ".trees", treetype="clock")
#state_tree_trace.setBurnin(f_burn)

# read in character map trace files
bg_anc_state_trace = readAncestralStateTrace(out_fp + fn + ".bg" + ".stoch_map.txt") 

# generate marginal MAP character history to be plotted
#characterMapTree(tree=mcc_tree, anc_state_trace, out_fn+".char.tree", out_fn+".posteriors.tree", num_time_slices=500, burnin=0.5)

# create a file that summarizes the sampled stochastically mapped transitions
summarizeCharacterMaps(tree= mcc_tree, character_map_trace_vector=bg_anc_state_trace, out_fp + fn + ".history.tsv", burnin=f_burn)

print("...Super done!")

q()